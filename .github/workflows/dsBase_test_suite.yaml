################################################################################
# DataSHIELD GHA test suite - dsBase
# Adapted from `azure-pipelines.yml` by Roberto Villegas-Diaz
#
# Inside the root directory $(Pipeline.Workspace) will be a file tree like:
# /dsBase               <- Checked out version of datashield/dsBase
# /dsBase/logs          <- Where results of tests and logs are collated
# /testStatus           <- Checked out version of datashield/testStatus
#
# As of Jul 2025 this takes ~ 9 mins to run.
################################################################################
name: DataSHIELD GHA test suite for dsBase

on:
  push:
    branches:
      - master
      - v6.3.3-dev
      
  schedule:
    - cron: '0 0 * * 0'   # Weekly on master
    - cron: '0 1 * * *'   # Nightly on v6.3.3-dev

jobs:
  dsBase_test_suite:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    # These should all be constant, except TEST_FILTER. This can be used to test 
    # subsets of test files in the testthat directory. Options are like:
    # '*'               <- Run all tests.
    # 'asNumericDS*'    <- Run all asNumericDS tests, i.e. all the arg, etc. tests.
    # '*_smk_*'         <- Run all the smoke tests for all functions.
    env:
      TEST_FILTER: '*'
      _r_check_system_clock_: 0
      DATETIME: ${{ github.run_id }}-${{ github.run_attempt }}
      PROJECT_NAME: dsBase
      BRANCH_NAME: ${{ github.ref_name }}
      REPO_OWNER: ${{ github.repository_owner }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - name: Checkout dsBase
        uses: actions/checkout@v4
        with:
          path: dsBase

      - name: Checkout testStatus
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_OWNER }}/testStatus
          token: ${{ secrets.DATASHIELD_DEV }}
          ref: master
          path: testStatus

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: release
          http-user-agent: release
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::rcmdcheck
            cran::devtools
          needs: check
          
      - name: Check man files up-to-date
        run: |
          orig_sum=$(find man -type f | sort -u | xargs cat | md5sum)
          R -e "devtools::document()"
          new_sum=$(find man -type f | sort -u | xargs cat | md5sum)
          if [ "$orig_sum" != "$new_sum" ]; then
            echo "Your committed manual files (man/*.Rd) are out of sync with the R files. Run devtools::document() locally then commit."
            exit 1
          else
            echo "Documentation up-to-date."
          fi
        working-directory: dsBase
        continue-on-error: true

      - name: Run devtools::check
        run: |
          R -q -e "library('devtools'); devtools::check(args = c('--no-tests', '--no-examples'))" | tee ../check.Rout
          grep -q "^0 errors" ../check.Rout && grep -q " 0 warnings" ../check.Rout && grep -q " 0 notes" ../check.Rout
        working-directory: dsBase
        continue-on-error: true

      - name: Run tests with coverage & JUnit report
        run: |
          mkdir -p logs
          R -q -e "devtools::reload();"
          R -q -e '
            write.csv(
              covr::coverage_to_list(
                covr::package_coverage(
                  type = c("none"),
                  code = c('"'"'
                    output_file <- file("test_console_output.txt");
                    sink(output_file);
                    sink(output_file, type = "message");
                    junit_rep <- testthat::JunitReporter$new(file = file.path(getwd(), "test_results.xml"));
                    progress_rep <- testthat::ProgressReporter$new(max_failures = 999999);
                    multi_rep <- testthat::MultiReporter$new(reporters = list(progress_rep, junit_rep));
                    testthat::test_package("${{ env.PROJECT_NAME }}", filter = "${{ env.TEST_FILTER }}", reporter = multi_rep, stop_on_failure = FALSE)'"'"'
                  )
                )
              ),
              "coveragelist.csv"
            )'
          
          ls *
          mv coveragelist.csv logs/
          mv test_* logs/
          grep -q " FAIL 0 " logs/test_console_output.txt
        working-directory: dsBase

      - name: Check for JUnit errors
        run: |
          issue_count=$(sed 's/failures="0" errors="0"//' test_results.xml | grep -c errors= || true)
          echo "Number of testsuites with issues: $issue_count"
          sed 's/failures="0" errors="0"//' test_results.xml | grep errors= > issues.log || true
          cat issues.log || true
          exit $issue_count
        working-directory: dsBase/logs

      - name: Write versions to file
        run: |
          echo "branch:${{ env.BRANCH_NAME }}" > ${{ env.DATETIME }}.txt
          echo "os:$(lsb_release -ds)" >> ${{ env.DATETIME }}.txt
          echo "R:$(R --version | head -n1)" >> ${{ env.DATETIME }}.txt
        working-directory: dsBase/logs

      - name: Commit results to testStatus
        # if: github.repository == 'villegar/dsBase' && github.event_name != 'pull_request'
        run: |
          git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config --global user.name "$GITHUB_ACTOR"
          cd testStatus
          git checkout master
          git pull

          mkdir -p logs/${{ env.PROJECT_NAME }}/${{ env.BRANCH_NAME }}/${{ env.DATETIME }}/
          
          # Copy logs to new logs directory location
          cp -rv ../dsBase/logs/* logs/${{ env.PROJECT_NAME }}/${{ env.BRANCH_NAME }}/${{ env.DATETIME }}/
          cp -rv ../dsBase/logs/${{ env.DATETIME }}.txt logs/${{ env.PROJECT_NAME }}/${{ env.BRANCH_NAME }}/${{ env.DATETIME }}/
          
          # Create symbolic link
          ln -sf ${{ env.DATETIME }}/ logs/${{ env.PROJECT_NAME }}/${{ env.BRANCH_NAME }}/.LATEST

          # Run status.py script here if applicable
          # e.g. source/status.py logs/... logs/... status.html ...

          git add .
          git commit -m "Auto test for ${{ env.PROJECT_NAME }}/${{ env.BRANCH_NAME }} @ ${{ env.DATETIME }}"
          git push

      - name: Dump environment info
        run: |
          echo -e "\n#############################"
          echo -e "ls /: ######################"
          ls -al .
          echo -e "\n#############################"
          echo -e "lscpu: ######################"
          lscpu
          echo -e "\n#############################"
          echo -e "memory: #####################"
          free -m
          echo -e "\n#############################"
          echo -e "env: ########################"
          env
          echo -e "\n#############################"
          echo -e "R sessionInfo(): ############"
          R -e 'sessionInfo()'
          sudo apt install tree -y
          tree .

